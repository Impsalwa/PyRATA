Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> quantifiedstep expression
Rule 2     expression -> quantifiedstep
Rule 3     quantifiedstep -> step
Rule 4     quantifiedstep -> OPTION step
Rule 5     quantifiedstep -> ATLEASTONE step
Rule 6     quantifiedstep -> ANY step
Rule 7     step -> atomicconstraint
Rule 8     step -> NOT step
Rule 9     step -> LBRACKET classconstraint RBRACKET
Rule 10    classconstraint -> classconstraint AND partofclassconstraint
Rule 11    classconstraint -> classconstraint OR partofclassconstraint
Rule 12    classconstraint -> partofclassconstraint
Rule 13    partofclassconstraint -> atomicconstraint
Rule 14    partofclassconstraint -> LPAREN classconstraint RPAREN
Rule 15    partofclassconstraint -> NOT classconstraint
Rule 16    atomicconstraint -> NAME EQ VALUE
Rule 17    atomicconstraint -> NAME MATCH VALUE
Rule 18    atomicconstraint -> NAME IN VALUE

Terminals, with rules where they appear

AND                  : 10
ANY                  : 6
ATLEASTONE           : 5
EQ                   : 16
IN                   : 18
LBRACKET             : 9
LPAREN               : 14
MATCH                : 17
NAME                 : 16 17 18
NOT                  : 8 15
OPTION               : 4
OR                   : 11
RBRACKET             : 9
RPAREN               : 14
VALUE                : 16 17 18
error                : 

Nonterminals, with rules where they appear

atomicconstraint     : 7 13
classconstraint      : 9 10 11 14 15
expression           : 1 0
partofclassconstraint : 10 11 12
quantifiedstep       : 1 2
step                 : 3 4 5 6 8

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . quantifiedstep expression
    (2) expression -> . quantifiedstep
    (3) quantifiedstep -> . step
    (4) quantifiedstep -> . OPTION step
    (5) quantifiedstep -> . ATLEASTONE step
    (6) quantifiedstep -> . ANY step
    (7) step -> . atomicconstraint
    (8) step -> . NOT step
    (9) step -> . LBRACKET classconstraint RBRACKET
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    OPTION          shift and go to state 7
    ATLEASTONE      shift and go to state 2
    ANY             shift and go to state 3
    NOT             shift and go to state 6
    LBRACKET        shift and go to state 5
    NAME            shift and go to state 9

    step                           shift and go to state 4
    expression                     shift and go to state 1
    quantifiedstep                 shift and go to state 10
    atomicconstraint               shift and go to state 8

state 1

    (0) S' -> expression .



state 2

    (5) quantifiedstep -> ATLEASTONE . step
    (7) step -> . atomicconstraint
    (8) step -> . NOT step
    (9) step -> . LBRACKET classconstraint RBRACKET
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    NOT             shift and go to state 6
    LBRACKET        shift and go to state 5
    NAME            shift and go to state 9

    step                           shift and go to state 11
    atomicconstraint               shift and go to state 8

state 3

    (6) quantifiedstep -> ANY . step
    (7) step -> . atomicconstraint
    (8) step -> . NOT step
    (9) step -> . LBRACKET classconstraint RBRACKET
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    NOT             shift and go to state 6
    LBRACKET        shift and go to state 5
    NAME            shift and go to state 9

    step                           shift and go to state 12
    atomicconstraint               shift and go to state 8

state 4

    (3) quantifiedstep -> step .

    OPTION          reduce using rule 3 (quantifiedstep -> step .)
    ATLEASTONE      reduce using rule 3 (quantifiedstep -> step .)
    ANY             reduce using rule 3 (quantifiedstep -> step .)
    NOT             reduce using rule 3 (quantifiedstep -> step .)
    LBRACKET        reduce using rule 3 (quantifiedstep -> step .)
    NAME            reduce using rule 3 (quantifiedstep -> step .)
    $end            reduce using rule 3 (quantifiedstep -> step .)


state 5

    (9) step -> LBRACKET . classconstraint RBRACKET
    (10) classconstraint -> . classconstraint AND partofclassconstraint
    (11) classconstraint -> . classconstraint OR partofclassconstraint
    (12) classconstraint -> . partofclassconstraint
    (13) partofclassconstraint -> . atomicconstraint
    (14) partofclassconstraint -> . LPAREN classconstraint RPAREN
    (15) partofclassconstraint -> . NOT classconstraint
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    NAME            shift and go to state 9

    classconstraint                shift and go to state 17
    partofclassconstraint          shift and go to state 13
    atomicconstraint               shift and go to state 16

state 6

    (8) step -> NOT . step
    (7) step -> . atomicconstraint
    (8) step -> . NOT step
    (9) step -> . LBRACKET classconstraint RBRACKET
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    NOT             shift and go to state 6
    LBRACKET        shift and go to state 5
    NAME            shift and go to state 9

    step                           shift and go to state 18
    atomicconstraint               shift and go to state 8

state 7

    (4) quantifiedstep -> OPTION . step
    (7) step -> . atomicconstraint
    (8) step -> . NOT step
    (9) step -> . LBRACKET classconstraint RBRACKET
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    NOT             shift and go to state 6
    LBRACKET        shift and go to state 5
    NAME            shift and go to state 9

    step                           shift and go to state 19
    atomicconstraint               shift and go to state 8

state 8

    (7) step -> atomicconstraint .

    OPTION          reduce using rule 7 (step -> atomicconstraint .)
    ATLEASTONE      reduce using rule 7 (step -> atomicconstraint .)
    ANY             reduce using rule 7 (step -> atomicconstraint .)
    NOT             reduce using rule 7 (step -> atomicconstraint .)
    LBRACKET        reduce using rule 7 (step -> atomicconstraint .)
    NAME            reduce using rule 7 (step -> atomicconstraint .)
    $end            reduce using rule 7 (step -> atomicconstraint .)


state 9

    (16) atomicconstraint -> NAME . EQ VALUE
    (17) atomicconstraint -> NAME . MATCH VALUE
    (18) atomicconstraint -> NAME . IN VALUE

    EQ              shift and go to state 20
    MATCH           shift and go to state 22
    IN              shift and go to state 21


state 10

    (1) expression -> quantifiedstep . expression
    (2) expression -> quantifiedstep .
    (1) expression -> . quantifiedstep expression
    (2) expression -> . quantifiedstep
    (3) quantifiedstep -> . step
    (4) quantifiedstep -> . OPTION step
    (5) quantifiedstep -> . ATLEASTONE step
    (6) quantifiedstep -> . ANY step
    (7) step -> . atomicconstraint
    (8) step -> . NOT step
    (9) step -> . LBRACKET classconstraint RBRACKET
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    $end            reduce using rule 2 (expression -> quantifiedstep .)
    OPTION          shift and go to state 7
    ATLEASTONE      shift and go to state 2
    ANY             shift and go to state 3
    NOT             shift and go to state 6
    LBRACKET        shift and go to state 5
    NAME            shift and go to state 9

    step                           shift and go to state 4
    quantifiedstep                 shift and go to state 10
    expression                     shift and go to state 23
    atomicconstraint               shift and go to state 8

state 11

    (5) quantifiedstep -> ATLEASTONE step .

    OPTION          reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)
    ATLEASTONE      reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)
    ANY             reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)
    NOT             reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)
    LBRACKET        reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)
    NAME            reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)
    $end            reduce using rule 5 (quantifiedstep -> ATLEASTONE step .)


state 12

    (6) quantifiedstep -> ANY step .

    OPTION          reduce using rule 6 (quantifiedstep -> ANY step .)
    ATLEASTONE      reduce using rule 6 (quantifiedstep -> ANY step .)
    ANY             reduce using rule 6 (quantifiedstep -> ANY step .)
    NOT             reduce using rule 6 (quantifiedstep -> ANY step .)
    LBRACKET        reduce using rule 6 (quantifiedstep -> ANY step .)
    NAME            reduce using rule 6 (quantifiedstep -> ANY step .)
    $end            reduce using rule 6 (quantifiedstep -> ANY step .)


state 13

    (12) classconstraint -> partofclassconstraint .

    AND             reduce using rule 12 (classconstraint -> partofclassconstraint .)
    OR              reduce using rule 12 (classconstraint -> partofclassconstraint .)
    RBRACKET        reduce using rule 12 (classconstraint -> partofclassconstraint .)
    RPAREN          reduce using rule 12 (classconstraint -> partofclassconstraint .)


state 14

    (14) partofclassconstraint -> LPAREN . classconstraint RPAREN
    (10) classconstraint -> . classconstraint AND partofclassconstraint
    (11) classconstraint -> . classconstraint OR partofclassconstraint
    (12) classconstraint -> . partofclassconstraint
    (13) partofclassconstraint -> . atomicconstraint
    (14) partofclassconstraint -> . LPAREN classconstraint RPAREN
    (15) partofclassconstraint -> . NOT classconstraint
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    NAME            shift and go to state 9

    classconstraint                shift and go to state 24
    partofclassconstraint          shift and go to state 13
    atomicconstraint               shift and go to state 16

state 15

    (15) partofclassconstraint -> NOT . classconstraint
    (10) classconstraint -> . classconstraint AND partofclassconstraint
    (11) classconstraint -> . classconstraint OR partofclassconstraint
    (12) classconstraint -> . partofclassconstraint
    (13) partofclassconstraint -> . atomicconstraint
    (14) partofclassconstraint -> . LPAREN classconstraint RPAREN
    (15) partofclassconstraint -> . NOT classconstraint
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    NAME            shift and go to state 9

    classconstraint                shift and go to state 25
    partofclassconstraint          shift and go to state 13
    atomicconstraint               shift and go to state 16

state 16

    (13) partofclassconstraint -> atomicconstraint .

    RBRACKET        reduce using rule 13 (partofclassconstraint -> atomicconstraint .)
    AND             reduce using rule 13 (partofclassconstraint -> atomicconstraint .)
    OR              reduce using rule 13 (partofclassconstraint -> atomicconstraint .)
    RPAREN          reduce using rule 13 (partofclassconstraint -> atomicconstraint .)


state 17

    (9) step -> LBRACKET classconstraint . RBRACKET
    (10) classconstraint -> classconstraint . AND partofclassconstraint
    (11) classconstraint -> classconstraint . OR partofclassconstraint

    RBRACKET        shift and go to state 26
    AND             shift and go to state 28
    OR              shift and go to state 27


state 18

    (8) step -> NOT step .

    OPTION          reduce using rule 8 (step -> NOT step .)
    ATLEASTONE      reduce using rule 8 (step -> NOT step .)
    ANY             reduce using rule 8 (step -> NOT step .)
    NOT             reduce using rule 8 (step -> NOT step .)
    LBRACKET        reduce using rule 8 (step -> NOT step .)
    NAME            reduce using rule 8 (step -> NOT step .)
    $end            reduce using rule 8 (step -> NOT step .)


state 19

    (4) quantifiedstep -> OPTION step .

    OPTION          reduce using rule 4 (quantifiedstep -> OPTION step .)
    ATLEASTONE      reduce using rule 4 (quantifiedstep -> OPTION step .)
    ANY             reduce using rule 4 (quantifiedstep -> OPTION step .)
    NOT             reduce using rule 4 (quantifiedstep -> OPTION step .)
    LBRACKET        reduce using rule 4 (quantifiedstep -> OPTION step .)
    NAME            reduce using rule 4 (quantifiedstep -> OPTION step .)
    $end            reduce using rule 4 (quantifiedstep -> OPTION step .)


state 20

    (16) atomicconstraint -> NAME EQ . VALUE

    VALUE           shift and go to state 29


state 21

    (18) atomicconstraint -> NAME IN . VALUE

    VALUE           shift and go to state 30


state 22

    (17) atomicconstraint -> NAME MATCH . VALUE

    VALUE           shift and go to state 31


state 23

    (1) expression -> quantifiedstep expression .

    $end            reduce using rule 1 (expression -> quantifiedstep expression .)


state 24

    (14) partofclassconstraint -> LPAREN classconstraint . RPAREN
    (10) classconstraint -> classconstraint . AND partofclassconstraint
    (11) classconstraint -> classconstraint . OR partofclassconstraint

    RPAREN          shift and go to state 32
    AND             shift and go to state 28
    OR              shift and go to state 27


state 25

    (15) partofclassconstraint -> NOT classconstraint .
    (10) classconstraint -> classconstraint . AND partofclassconstraint
    (11) classconstraint -> classconstraint . OR partofclassconstraint

    RBRACKET        reduce using rule 15 (partofclassconstraint -> NOT classconstraint .)
    AND             reduce using rule 15 (partofclassconstraint -> NOT classconstraint .)
    OR              reduce using rule 15 (partofclassconstraint -> NOT classconstraint .)
    RPAREN          reduce using rule 15 (partofclassconstraint -> NOT classconstraint .)

  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 27 ]


state 26

    (9) step -> LBRACKET classconstraint RBRACKET .

    OPTION          reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)
    ATLEASTONE      reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)
    ANY             reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)
    NOT             reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)
    LBRACKET        reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)
    NAME            reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)
    $end            reduce using rule 9 (step -> LBRACKET classconstraint RBRACKET .)


state 27

    (11) classconstraint -> classconstraint OR . partofclassconstraint
    (13) partofclassconstraint -> . atomicconstraint
    (14) partofclassconstraint -> . LPAREN classconstraint RPAREN
    (15) partofclassconstraint -> . NOT classconstraint
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    NAME            shift and go to state 9

    partofclassconstraint          shift and go to state 33
    atomicconstraint               shift and go to state 16

state 28

    (10) classconstraint -> classconstraint AND . partofclassconstraint
    (13) partofclassconstraint -> . atomicconstraint
    (14) partofclassconstraint -> . LPAREN classconstraint RPAREN
    (15) partofclassconstraint -> . NOT classconstraint
    (16) atomicconstraint -> . NAME EQ VALUE
    (17) atomicconstraint -> . NAME MATCH VALUE
    (18) atomicconstraint -> . NAME IN VALUE

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    NAME            shift and go to state 9

    partofclassconstraint          shift and go to state 34
    atomicconstraint               shift and go to state 16

state 29

    (16) atomicconstraint -> NAME EQ VALUE .

    OPTION          reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    ATLEASTONE      reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    ANY             reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    NOT             reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    LBRACKET        reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    NAME            reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    $end            reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    RBRACKET        reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    AND             reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    OR              reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)
    RPAREN          reduce using rule 16 (atomicconstraint -> NAME EQ VALUE .)


state 30

    (18) atomicconstraint -> NAME IN VALUE .

    OPTION          reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    ATLEASTONE      reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    ANY             reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    NOT             reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    LBRACKET        reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    NAME            reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    $end            reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    RBRACKET        reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    AND             reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    OR              reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)
    RPAREN          reduce using rule 18 (atomicconstraint -> NAME IN VALUE .)


state 31

    (17) atomicconstraint -> NAME MATCH VALUE .

    OPTION          reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    ATLEASTONE      reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    ANY             reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    NOT             reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    LBRACKET        reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    NAME            reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    $end            reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    RBRACKET        reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    AND             reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    OR              reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)
    RPAREN          reduce using rule 17 (atomicconstraint -> NAME MATCH VALUE .)


state 32

    (14) partofclassconstraint -> LPAREN classconstraint RPAREN .

    RBRACKET        reduce using rule 14 (partofclassconstraint -> LPAREN classconstraint RPAREN .)
    AND             reduce using rule 14 (partofclassconstraint -> LPAREN classconstraint RPAREN .)
    OR              reduce using rule 14 (partofclassconstraint -> LPAREN classconstraint RPAREN .)
    RPAREN          reduce using rule 14 (partofclassconstraint -> LPAREN classconstraint RPAREN .)


state 33

    (11) classconstraint -> classconstraint OR partofclassconstraint .

    AND             reduce using rule 11 (classconstraint -> classconstraint OR partofclassconstraint .)
    OR              reduce using rule 11 (classconstraint -> classconstraint OR partofclassconstraint .)
    RBRACKET        reduce using rule 11 (classconstraint -> classconstraint OR partofclassconstraint .)
    RPAREN          reduce using rule 11 (classconstraint -> classconstraint OR partofclassconstraint .)


state 34

    (10) classconstraint -> classconstraint AND partofclassconstraint .

    AND             reduce using rule 10 (classconstraint -> classconstraint AND partofclassconstraint .)
    OR              reduce using rule 10 (classconstraint -> classconstraint AND partofclassconstraint .)
    RBRACKET        reduce using rule 10 (classconstraint -> classconstraint AND partofclassconstraint .)
    RPAREN          reduce using rule 10 (classconstraint -> classconstraint AND partofclassconstraint .)

