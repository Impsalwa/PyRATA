
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionleftORleftANDleftLPARENRPARENrightNOTleftISNAME VALUE IS AND OR LBRACKET RBRACKET LPAREN RPAREN NOT OPTION ATLEASTONE ANYstatement : expression expression : quantifiedstep expression\n                  | quantifiedstep quantifiedstep : step \n            | OPTION step\n            | ATLEASTONE step \n            | ANY stepstep : atomicconstraint\n            | NOT step\n            | LBRACKET classconstraint RBRACKET classconstraint : partofclassconstraint \n            | partofclassconstraint AND classconstraint\n            | partofclassconstraint OR classconstraint partofclassconstraint : atomicconstraint\n                    | LPAREN classconstraint RPAREN  \n                    | NOT classconstraint atomicconstraint : NAME IS VALUE '
    
_lr_action_items = {'VALUE':([16,],[22,]),'ANY':([0,1,5,7,11,12,13,15,22,23,],[2,-4,-8,2,-7,-9,-6,-5,-17,-10,]),'IS':([9,],[16,]),'RBRACKET':([17,19,20,22,24,28,29,30,],[23,-11,-14,-17,-16,-13,-12,-15,]),'NOT':([0,1,2,3,4,5,7,8,10,11,12,13,15,18,21,22,23,25,26,],[3,-4,3,3,3,-8,3,3,18,-7,-9,-6,-5,18,18,-17,-10,18,18,]),'RPAREN':([19,20,22,24,27,28,29,30,],[-11,-14,-17,-16,30,-13,-12,-15,]),'OR':([19,20,22,24,28,29,30,],[25,-14,-17,-16,-13,-12,-15,]),'ATLEASTONE':([0,1,5,7,11,12,13,15,22,23,],[4,-4,-8,4,-7,-9,-6,-5,-17,-10,]),'AND':([19,20,22,24,28,29,30,],[26,-14,-17,-16,-13,-12,-15,]),'$end':([1,5,6,7,11,12,13,14,15,22,23,],[-4,-8,0,-3,-7,-9,-6,-2,-5,-17,-10,]),'OPTION':([0,1,5,7,11,12,13,15,22,23,],[8,-4,-8,8,-7,-9,-6,-5,-17,-10,]),'LPAREN':([10,18,21,25,26,],[21,21,21,21,21,]),'NAME':([0,1,2,3,4,5,7,8,10,11,12,13,15,18,21,22,23,25,26,],[9,-4,9,9,9,-8,9,9,9,-7,-9,-6,-5,9,9,-17,-10,9,9,]),'LBRACKET':([0,1,2,3,4,5,7,8,11,12,13,15,22,23,],[10,-4,10,10,10,-8,10,10,-7,-9,-6,-5,-17,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'atomicconstraint':([0,2,3,4,7,8,10,18,21,25,26,],[5,5,5,5,5,5,20,20,20,20,20,]),'expression':([0,7,],[6,14,]),'classconstraint':([10,18,21,25,26,],[17,24,27,28,29,]),'step':([0,2,3,4,7,8,],[1,11,12,13,1,15,]),'quantifiedstep':([0,7,],[7,7,]),'partofclassconstraint':([10,18,21,25,26,],[19,19,19,19,19,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','pyrata_parser.py',36),
  ('expression -> quantifiedstep expression','expression',2,'p_expression','pyrata_parser.py',41),
  ('expression -> quantifiedstep','expression',1,'p_expression','pyrata_parser.py',42),
  ('quantifiedstep -> step','quantifiedstep',1,'p_quantifiedstep','pyrata_parser.py',107),
  ('quantifiedstep -> OPTION step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',108),
  ('quantifiedstep -> ATLEASTONE step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',109),
  ('quantifiedstep -> ANY step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',110),
  ('step -> atomicconstraint','step',1,'p_step','pyrata_parser.py',268),
  ('step -> NOT step','step',2,'p_step','pyrata_parser.py',269),
  ('step -> LBRACKET classconstraint RBRACKET','step',3,'p_step','pyrata_parser.py',270),
  ('classconstraint -> partofclassconstraint','classconstraint',1,'p_classconstraint','pyrata_parser.py',309),
  ('classconstraint -> partofclassconstraint AND classconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',310),
  ('classconstraint -> partofclassconstraint OR classconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',311),
  ('partofclassconstraint -> atomicconstraint','partofclassconstraint',1,'p_partofclassconstraint','pyrata_parser.py',332),
  ('partofclassconstraint -> LPAREN classconstraint RPAREN','partofclassconstraint',3,'p_partofclassconstraint','pyrata_parser.py',333),
  ('partofclassconstraint -> NOT classconstraint','partofclassconstraint',2,'p_partofclassconstraint','pyrata_parser.py',334),
  ('atomicconstraint -> NAME IS VALUE','atomicconstraint',3,'p_atomicconstraint','pyrata_parser.py',354),
]
