
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'quantifiedstepleftLBRACKETRBRACKETleftORleftANDleftLPARENRPARENrightNOTleftEQNAME VALUE EQ AND OR LBRACKET RBRACKET LPAREN RPAREN NOT OPTION ATLEASTONE ANYexpression : quantifiedstep expression\n                  | quantifiedstep quantifiedstep : step \n            | OPTION step\n            | ATLEASTONE step \n            | ANY stepstep : atomicconstraint\n            | NOT step\n            | LBRACKET classconstraint RBRACKET classconstraint : classconstraint AND partofclassconstraint\n            | classconstraint OR partofclassconstraint \n            | partofclassconstraint partofclassconstraint : atomicconstraint\n                    | LPAREN classconstraint RPAREN  \n                    | NOT classconstraint atomicconstraint : NAME EQ VALUE '
    
_lr_action_items = {'NAME':([0,2,3,7,8,9,14,18,23,24,],[1,1,1,1,1,1,1,1,1,1,]),'NOT':([0,2,3,7,8,9,14,18,23,24,],[2,2,2,2,14,2,14,14,14,14,]),'OR':([15,16,17,20,21,25,26,27,28,],[-12,-13,24,-16,-15,24,-10,-11,-14,]),'ANY':([0,],[3,]),'AND':([15,16,17,20,21,25,26,27,28,],[-12,-13,23,-16,-15,23,-10,-11,-14,]),'VALUE':([10,],[20,]),'RBRACKET':([15,16,17,20,21,26,27,28,],[-12,-13,22,-16,-15,-10,-11,-14,]),'OPTION':([0,],[9,]),'RPAREN':([15,16,20,21,25,26,27,28,],[-12,-13,-16,-15,28,-10,-11,-14,]),'LBRACKET':([0,2,3,7,9,],[8,8,8,8,8,]),'EQ':([1,],[10,]),'$end':([4,5,6,11,12,13,19,20,22,],[-7,-3,0,-8,-6,-5,-4,-16,-9,]),'ATLEASTONE':([0,],[7,]),'LPAREN':([8,14,18,23,24,],[18,18,18,18,18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'quantifiedstep':([0,],[6,]),'classconstraint':([8,14,18,],[17,21,25,]),'atomicconstraint':([0,2,3,7,8,9,14,18,23,24,],[4,4,4,4,16,4,16,16,16,16,]),'step':([0,2,3,7,9,],[5,11,12,13,19,]),'partofclassconstraint':([8,14,18,23,24,],[15,15,15,26,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> quantifiedstep","S'",1,None,None,None),
  ('expression -> quantifiedstep expression','expression',2,'p_expression','pyrata_parser.py',62),
  ('expression -> quantifiedstep','expression',1,'p_expression','pyrata_parser.py',63),
  ('quantifiedstep -> step','quantifiedstep',1,'p_quantifiedstep','pyrata_parser.py',145),
  ('quantifiedstep -> OPTION step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',146),
  ('quantifiedstep -> ATLEASTONE step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',147),
  ('quantifiedstep -> ANY step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',148),
  ('step -> atomicconstraint','step',1,'p_step','pyrata_parser.py',404),
  ('step -> NOT step','step',2,'p_step','pyrata_parser.py',405),
  ('step -> LBRACKET classconstraint RBRACKET','step',3,'p_step','pyrata_parser.py',406),
  ('classconstraint -> classconstraint AND partofclassconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',450),
  ('classconstraint -> classconstraint OR partofclassconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',451),
  ('classconstraint -> partofclassconstraint','classconstraint',1,'p_classconstraint','pyrata_parser.py',452),
  ('partofclassconstraint -> atomicconstraint','partofclassconstraint',1,'p_partofclassconstraint','pyrata_parser.py',482),
  ('partofclassconstraint -> LPAREN classconstraint RPAREN','partofclassconstraint',3,'p_partofclassconstraint','pyrata_parser.py',483),
  ('partofclassconstraint -> NOT classconstraint','partofclassconstraint',2,'p_partofclassconstraint','pyrata_parser.py',484),
  ('atomicconstraint -> NAME EQ VALUE','atomicconstraint',3,'p_atomicconstraint','pyrata_parser.py',504),
]
