
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'quantifiedstepleftLBRACKETRBRACKETleftORleftANDleftLPARENRPARENrightNOTleftEQNAME VALUE EQ MATCH AND OR LBRACKET RBRACKET LPAREN RPAREN NOT OPTION ATLEASTONE ANYexpression : quantifiedstep expression\n                  | quantifiedstep quantifiedstep : step \n            | OPTION step\n            | ATLEASTONE step \n            | ANY stepstep : atomicconstraint\n            | NOT step\n            | LBRACKET classconstraint RBRACKET classconstraint : classconstraint AND partofclassconstraint\n            | classconstraint OR partofclassconstraint \n            | partofclassconstraint partofclassconstraint : atomicconstraint\n                    | LPAREN classconstraint RPAREN  \n                    | NOT classconstraint atomicconstraint : NAME EQ VALUE \n                          | NAME MATCH VALUE'
    
_lr_action_items = {'$end':([2,6,9,10,11,12,20,21,22,26,],[0,-3,-7,-4,-5,-8,-6,-17,-16,-9,]),'ATLEASTONE':([0,],[3,]),'MATCH':([5,],[13,]),'VALUE':([13,14,],[21,22,]),'LPAREN':([7,15,16,25,27,],[15,15,15,15,15,]),'OR':([17,18,19,21,22,23,24,28,29,30,],[-12,-13,27,-17,-16,27,-15,-14,-10,-11,]),'RPAREN':([17,18,21,22,23,24,28,29,30,],[-12,-13,-17,-16,28,-15,-14,-10,-11,]),'NOT':([0,1,3,4,7,8,15,16,25,27,],[4,4,4,4,16,4,16,16,16,16,]),'NAME':([0,1,3,4,7,8,15,16,25,27,],[5,5,5,5,5,5,5,5,5,5,]),'OPTION':([0,],[1,]),'AND':([17,18,19,21,22,23,24,28,29,30,],[-12,-13,25,-17,-16,25,-15,-14,-10,-11,]),'LBRACKET':([0,1,3,4,8,],[7,7,7,7,7,]),'RBRACKET':([17,18,19,21,22,24,28,29,30,],[-12,-13,26,-17,-16,-15,-14,-10,-11,]),'EQ':([5,],[14,]),'ANY':([0,],[8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'step':([0,1,3,4,8,],[6,10,11,12,20,]),'atomicconstraint':([0,1,3,4,7,8,15,16,25,27,],[9,9,9,9,18,9,18,18,18,18,]),'quantifiedstep':([0,],[2,]),'classconstraint':([7,15,16,],[19,23,24,]),'partofclassconstraint':([7,15,16,25,27,],[17,17,17,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> quantifiedstep","S'",1,None,None,None),
  ('expression -> quantifiedstep expression','expression',2,'p_expression','pyrata_parser.py',43),
  ('expression -> quantifiedstep','expression',1,'p_expression','pyrata_parser.py',44),
  ('quantifiedstep -> step','quantifiedstep',1,'p_quantifiedstep','pyrata_parser.py',124),
  ('quantifiedstep -> OPTION step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',125),
  ('quantifiedstep -> ATLEASTONE step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',126),
  ('quantifiedstep -> ANY step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',127),
  ('step -> atomicconstraint','step',1,'p_step','pyrata_parser.py',370),
  ('step -> NOT step','step',2,'p_step','pyrata_parser.py',371),
  ('step -> LBRACKET classconstraint RBRACKET','step',3,'p_step','pyrata_parser.py',372),
  ('classconstraint -> classconstraint AND partofclassconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',416),
  ('classconstraint -> classconstraint OR partofclassconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',417),
  ('classconstraint -> partofclassconstraint','classconstraint',1,'p_classconstraint','pyrata_parser.py',418),
  ('partofclassconstraint -> atomicconstraint','partofclassconstraint',1,'p_partofclassconstraint','pyrata_parser.py',448),
  ('partofclassconstraint -> LPAREN classconstraint RPAREN','partofclassconstraint',3,'p_partofclassconstraint','pyrata_parser.py',449),
  ('partofclassconstraint -> NOT classconstraint','partofclassconstraint',2,'p_partofclassconstraint','pyrata_parser.py',450),
  ('atomicconstraint -> NAME EQ VALUE','atomicconstraint',3,'p_atomicconstraint','pyrata_parser.py',470),
  ('atomicconstraint -> NAME MATCH VALUE','atomicconstraint',3,'p_atomicconstraint','pyrata_parser.py',471),
]
