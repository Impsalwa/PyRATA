
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'quantifiedstepleftLBRACKETRBRACKETleftORleftANDleftLPARENRPARENrightNOTleftISNAME VALUE IS AND OR LBRACKET RBRACKET LPAREN RPAREN NOT OPTION ATLEASTONE ANYexpression : quantifiedstep expression\n                  | quantifiedstep quantifiedstep : step \n            | OPTION step\n            | ATLEASTONE step \n            | ANY stepstep : atomicconstraint\n            | NOT step\n            | LBRACKET classconstraint RBRACKET classconstraint : classconstraint AND partofclassconstraint\n            | classconstraint OR partofclassconstraint \n            | partofclassconstraint partofclassconstraint : atomicconstraint\n                    | LPAREN classconstraint RPAREN  \n                    | NOT classconstraint atomicconstraint : NAME IS VALUE '
    
_lr_action_items = {'ANY':([0,],[1,]),'$end':([2,3,6,10,11,18,19,23,25,],[-7,-3,0,-6,-4,-5,-8,-9,-16,]),'IS':([7,],[17,]),'RBRACKET':([13,14,15,24,25,26,27,28,],[-13,23,-12,-15,-16,-14,-10,-11,]),'OPTION':([0,],[4,]),'OR':([13,14,15,20,24,25,26,27,28,],[-13,22,-12,22,-15,-16,-14,-10,-11,]),'ATLEASTONE':([0,],[8,]),'RPAREN':([13,15,20,24,25,26,27,28,],[-13,-12,26,-15,-16,-14,-10,-11,]),'LBRACKET':([0,1,4,8,9,],[5,5,5,5,5,]),'AND':([13,14,15,20,24,25,26,27,28,],[-13,21,-12,21,-15,-16,-14,-10,-11,]),'NAME':([0,1,4,5,8,9,12,16,21,22,],[7,7,7,7,7,7,7,7,7,7,]),'VALUE':([17,],[25,]),'LPAREN':([5,12,16,21,22,],[12,12,12,12,12,]),'NOT':([0,1,4,5,8,9,12,16,21,22,],[9,9,9,16,9,9,16,16,16,16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'quantifiedstep':([0,],[6,]),'atomicconstraint':([0,1,4,5,8,9,12,16,21,22,],[2,2,2,13,2,2,13,13,13,13,]),'partofclassconstraint':([5,12,16,21,22,],[15,15,15,27,28,]),'step':([0,1,4,8,9,],[3,10,11,18,19,]),'classconstraint':([5,12,16,],[14,20,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> quantifiedstep","S'",1,None,None,None),
  ('expression -> quantifiedstep expression','expression',2,'p_expression','pyrata_parser.py',63),
  ('expression -> quantifiedstep','expression',1,'p_expression','pyrata_parser.py',64),
  ('quantifiedstep -> step','quantifiedstep',1,'p_quantifiedstep','pyrata_parser.py',146),
  ('quantifiedstep -> OPTION step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',147),
  ('quantifiedstep -> ATLEASTONE step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',148),
  ('quantifiedstep -> ANY step','quantifiedstep',2,'p_quantifiedstep','pyrata_parser.py',149),
  ('step -> atomicconstraint','step',1,'p_step','pyrata_parser.py',397),
  ('step -> NOT step','step',2,'p_step','pyrata_parser.py',398),
  ('step -> LBRACKET classconstraint RBRACKET','step',3,'p_step','pyrata_parser.py',399),
  ('classconstraint -> classconstraint AND partofclassconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',443),
  ('classconstraint -> classconstraint OR partofclassconstraint','classconstraint',3,'p_classconstraint','pyrata_parser.py',444),
  ('classconstraint -> partofclassconstraint','classconstraint',1,'p_classconstraint','pyrata_parser.py',445),
  ('partofclassconstraint -> atomicconstraint','partofclassconstraint',1,'p_partofclassconstraint','pyrata_parser.py',475),
  ('partofclassconstraint -> LPAREN classconstraint RPAREN','partofclassconstraint',3,'p_partofclassconstraint','pyrata_parser.py',476),
  ('partofclassconstraint -> NOT classconstraint','partofclassconstraint',2,'p_partofclassconstraint','pyrata_parser.py',477),
  ('atomicconstraint -> NAME IS VALUE','atomicconstraint',3,'p_atomicconstraint','pyrata_parser.py',497),
]
